$tiny-width: 320px;
$desktop-width: 1084px;

@mixin mobile {
  @media (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}

@function resolve($size) {
  @return $size / 1.6;
}

// NOTE: rem(1) normally means 10px;
@function rem($size) {
  @if (abs($size) < .3) {
    @return #{$size * 10}px;
  }

  @return #{resolve($size)}rem;
}

@mixin font-size($size) {
  font-size: #{resolve($size)}px;
  font-size: rem($size);
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin horizontal-align($position: relative) {
  position: $position;
  left: 50%;
  transform: translateX(-50%);
}

@mixin middle-align($position: relative) {
  position: $position;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin ellipsis() {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin padding-horizontal($size) {
  padding-left: $size;
  padding-right: $size;
}

@mixin padding-vertical($size) {
  padding-top: $size;
  padding-bottom: $size;
}

@mixin margin-horizontal($size) {
  margin-left: $size;
  margin-right: $size;
}

@mixin margin-vertical($size) {
  margin-top: $size;
  margin-bottom: $size;
}

@mixin transition($props, $duration: .56s, $delay: 0s, $fn: cubic-bezier(0.52, 0.16, 0.24, 1)) {
  $transition: ();
  @for $i from 1 through length($props) {
      @for $j from 0 to (length($props)) - (length($duration)) {
          $duration: join($duration, nth($duration, -1));
      }
      @for $j from 0 to (length($props)) - (length($delay)) {
          $delay: join($delay, nth($delay, -1));
      }

      $transition: append(
          $transition,
          (nth($props, $i) nth($duration, $i) $fn nth($delay, $i)),
          $separator: comma
      );
  }
  -webkit-transition: $transition;
  transition: $transition;
}
